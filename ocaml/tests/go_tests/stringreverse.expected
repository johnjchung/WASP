package main

import (
	"github.com/gin-gonic/gin"
	"math"
	"os"
)

func int_conv(anything interface{}) int {
	switch v := anything.(type) {
		case int:
			return v
		case float64, float32:
			var float_var = v.(float64)
			return int(math.Trunc(float_var))
		default:
			return 0
	}
	return 0
}

func float_conv(anything interface{}) float64 {
 	 switch v := anything.(type) {
		case int:
            return float64(v)
		case float64:
			return v
		default:
			return 0
	}
	return 0.0
}

type reverse_struct struct {
	Sublist string `db:"sublist" json:"sublist"`
}

func main() {
	router := gin.Default()
	router.GET("/reverse/:s", Get_reverse)
	router.Run(":"+os.Getenv("PORT"))
}

func reverseString(a string) string {
	i := int_conv(len(a)) - int_conv(1)
	reverseString := ""
	for i >= 0 {
	reverseString = (reverseString + a[i:int_conv(i) + int_conv(1)])
	i = int_conv(i) - int_conv(1)
	}
	return reverseString
}

func reverse_struct_wrapper(s string) reverse_struct {
	return reverse_struct{Sublist: reverseString(s)}
}

func Get_reverse(c *gin.Context) {
	s := c.Param("s")
	reverse_struct := reverse_struct_wrapper(s)
	c.JSON(200, reverse_struct)
}
