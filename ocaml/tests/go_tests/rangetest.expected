package main

import (
	"github.com/gin-gonic/gin"
	"math"
	"os"
)

func int_conv(anything interface{}) int {
	switch v := anything.(type) {
		case int:
			return v
		case float64, float32:
			var float_var = v.(float64)
			return int(math.Trunc(float_var))
		default:
			return 0
	}
	return 0
}

func float_conv(anything interface{}) float64 {
 	 switch v := anything.(type) {
		case int:
            return float64(v)
		case float64:
			return v
		default:
			return 0
	}
	return 0.0
}

type rangeTest_struct struct {
	JustOneChar string `db:"justOneChar" json:"justOneChar"`
	Substring string `db:"substring" json:"substring"`
	Sublist []int `db:"sublist" json:"sublist"`
}

func main() {
	router := gin.Default()
	router.GET("/rangeTest", Get_rangeTest)
	router.Run(":"+os.Getenv("PORT"))
}

func listAccess(a []int) []int {
	return a[1:3]
}

func rangeTest_struct_wrapper() rangeTest_struct {
	return rangeTest_struct{JustOneChar: "howdydoody"[2:3], Substring: "testtesttest"[0:4], Sublist: listAccess([]int {1, 4, 7, 10})}
}

func Get_rangeTest(c *gin.Context) {
	rangeTest_struct := rangeTest_struct_wrapper()
	c.JSON(200, rangeTest_struct)
}
