package main

import (
	"github.com/gin-gonic/gin"
	"math"
	"os"
)

func int_conv(anything interface{}) int {
	switch v := anything.(type) {
		case int:
			return v
		case float64, float32:
			var float_var = v.(float64)
			return int(math.Trunc(float_var))
		default:
			return 0
	}
	return 0
}

func float_conv(anything interface{}) float64 {
 	 switch v := anything.(type) {
		case int:
            return float64(v)
		case float64:
			return v
		default:
			return 0
	}
	return 0.0
}

type test_struct struct {
	G bool `db:"g" json:"g"`
	H bool `db:"h" json:"h"`
}

type vartypes_struct struct {
	A string `db:"a" json:"a"`
	B int `db:"b" json:"b"`
	C float64 `db:"c" json:"c"`
	D float64 `db:"d" json:"d"`
	E float64 `db:"e" json:"e"`
	F test_struct `db:"f" json:"f"`
}

func main() {
	router := gin.Default()
	router.GET("/vartypes", Get_vartypes)
	router.Run(":"+os.Getenv("PORT"))
}

func test_struct_wrapper(g bool, h bool) test_struct {
	return test_struct{G: g, H: h}
}

func vartypes_struct_wrapper() vartypes_struct {
	return vartypes_struct{A: "bob", B: 34, C: 12., D: 0.4, E: 1.23, F: test_struct_wrapper(true, false)}
}

func Get_vartypes(c *gin.Context) {
	vartypes_struct := vartypes_struct_wrapper()
	c.JSON(200, vartypes_struct)
}
