package main

import (
	"github.com/gin-gonic/gin"
	"math"
	"os"
	"strconv"
)

func int_conv(anything interface{}) int {
	switch v := anything.(type) {
		case int:
			return v
		case float64, float32:
			var float_var = v.(float64)
			return int(math.Trunc(float_var))
		default:
			return 0
	}
	return 0
}

func float_conv(anything interface{}) float64 {
 	 switch v := anything.(type) {
		case int:
            return float64(v)
		case float64:
			return v
		default:
			return 0
	}
	return 0.0
}

type doubleint_struct struct {
	Solution int `db:"solution" json:"solution"`
}

func main() {
	router := gin.Default()
	router.GET("/doubleint/:a", Get_doubleint)
	router.Run(":"+os.Getenv("PORT"))
}

func double(a int) int {
	return sum(a, a)
}

func sum(a int, b int) int {
	return int_conv(a) + int_conv(b)
}

func doubleint_struct_wrapper(a int) doubleint_struct {
	return doubleint_struct{Solution: double(a)}
}

func Get_doubleint(c *gin.Context) {
	a, err := strconv.Atoi(c.Param("a"))
	if	err != nil { c.String(400, "Error: A must be an integer."); return }
	doubleint_struct := doubleint_struct_wrapper(a)
	c.JSON(200, doubleint_struct)
}
