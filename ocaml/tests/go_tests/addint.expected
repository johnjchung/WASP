package main

import (
	"github.com/gin-gonic/gin"
	"math"
	"os"
)

func int_conv(anything interface{}) int {
	switch v := anything.(type) {
		case int:
			return v
		case float64, float32:
			var float_var = v.(float64)
			return int(math.Trunc(float_var))
		default:
			return 0
	}
	return 0
}

func float_conv(anything interface{}) float64 {
 	 switch v := anything.(type) {
		case int:
            return float64(v)
		case float64:
			return v
		default:
			return 0
	}
	return 0.0
}

type addint_struct struct {
	Testing string `db:"testing" json:"testing"`
	Answer int `db:"answer" json:"answer"`
}

func main() {
	router := gin.Default()
	router.GET("/addint", Get_addint)
	router.Run(":"+os.Getenv("PORT"))
}

func addint_struct_wrapper() addint_struct {
	return addint_struct{Testing: "3 plus 4", Answer: int_conv(3) + int_conv(4)}
}

func Get_addint(c *gin.Context) {
	addint_struct := addint_struct_wrapper()
	c.JSON(200, addint_struct)
}
