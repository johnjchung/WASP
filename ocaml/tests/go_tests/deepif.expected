package main

import (
	"github.com/gin-gonic/gin"
	"math"
	"os"
)

func int_conv(anything interface{}) int {
	switch v := anything.(type) {
		case int:
			return v
		case float64, float32:
			var float_var = v.(float64)
			return int(math.Trunc(float_var))
		default:
			return 0
	}
	return 0
}

func float_conv(anything interface{}) float64 {
 	 switch v := anything.(type) {
		case int:
            return float64(v)
		case float64:
			return v
		default:
			return 0
	}
	return 0.0
}

type deepif_struct struct {
	Hi int `db:"hi" json:"hi"`
}

func main() {
	router := gin.Default()
	router.GET("/deepif", Get_deepif)
	router.Run(":"+os.Getenv("PORT"))
}

func deepIf() int {
	i := 1
	if bool(i > 1) {
	if bool(i > 2) {
	if bool(i > 3) {
	i = 7
	} else {
	i = 8
	}
	} else {
	if i < 1 {
	i = 9
	} else {
	for i != 1 {
	i = 10
	}
	}
	}
	} else {
	if i < 1 {
	for i != 1 {
	i = 34
	}
	if i < 1 {
	i = 0
	} else {
	i = 7
	}
	} else {
	if i < 1 {
	i = 6
	} else {
	i = 9
	}
	}
	}
	return i
}

func deepif_struct_wrapper() deepif_struct {
	return deepif_struct{Hi: deepIf()}
}

func Get_deepif(c *gin.Context) {
	deepif_struct := deepif_struct_wrapper()
	c.JSON(200, deepif_struct)
}
