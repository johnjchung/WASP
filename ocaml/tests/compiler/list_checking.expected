package main

import (
	"github.com/gin-gonic/gin"
	"math"
	"os"
)

func int_conv(anything interface{}) int {
	switch v := anything.(type) {
		case int:
			return v
		case float64, float32:
			var float_var = v.(float64)
			return int(math.Trunc(float_var))
		default:
			return 0
	}
	return 0
}

func float_conv(anything interface{}) float64 {
 	 switch v := anything.(type) {
		case int:
            return float64(v)
		case float64:
			return v
		default:
			return 0
	}
	return 0.0
}

type listChecking_struct struct {
	An_int_list []int `db:"an_int_list" json:"an_int_list"`
	A_float_list []float64 `db:"a_float_list" json:"a_float_list"`
	A_string_list []string `db:"a_string_list" json:"a_string_list"`
	A_bool_list []bool `db:"a_bool_list" json:"a_bool_list"`
}

func main() {
	router := gin.Default()
	router.GET("/listChecking", Get_listChecking)
	router.Run(":"+os.Getenv("PORT"))
}

func listChecking_struct_wrapper() listChecking_struct {
	return listChecking_struct{An_int_list: []int {1, 2, 3}, A_float_list: []float64 {2.3, 3.4, 2.5}, A_string_list: []string {"neel", "makes", "lists"}, A_bool_list: []bool {true, false, true, false}}
}

func Get_listChecking(c *gin.Context) {
	listChecking_struct := listChecking_struct_wrapper()
	c.JSON(200, listChecking_struct)
}
