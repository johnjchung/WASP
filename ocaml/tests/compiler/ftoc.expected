package main

import (
	"github.com/gin-gonic/gin"
	"math"
	"os"
	"strconv"
)

func int_conv(anything interface{}) int {
	switch v := anything.(type) {
		case int:
			return v
		case float64, float32:
			var float_var = v.(float64)
			return int(math.Trunc(float_var))
		default:
			return 0
	}
	return 0
}

func float_conv(anything interface{}) float64 {
 	 switch v := anything.(type) {
		case int:
            return float64(v)
		case float64:
			return v
		default:
			return 0
	}
	return 0.0
}

type ftoc_struct struct {
	Celsius float64 `db:"celsius" json:"celsius"`
}

func main() {
	router := gin.Default()
	router.GET("/ftoc/:f", Get_ftoc)
	router.Run(":"+os.Getenv("PORT"))
}

func ffftoccc(f float64) float64 {
	cels := float_conv(float_conv(f) - float_conv(32)) * float_conv(float_conv(5) / float_conv(9))
	return cels
}

func ftoc_struct_wrapper(f float64) ftoc_struct {
	return ftoc_struct{Celsius: ffftoccc(f)}
}

func Get_ftoc(c *gin.Context) {
	f, err := strconv.ParseFloat(c.Param("f"), 64)
	if	err != nil { c.String(400, "Error: F must be a float."); return }
	ftoc_struct := ftoc_struct_wrapper(f)
	c.JSON(200, ftoc_struct)
}
