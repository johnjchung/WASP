package main

import (
	"github.com/gin-gonic/gin"
	"math"
	"os"
)

func int_conv(anything interface{}) int {
	switch v := anything.(type) {
		case int:
			return v
		case float64, float32:
			var float_var = v.(float64)
			return int(math.Trunc(float_var))
		default:
			return 0
	}
	return 0
}

func float_conv(anything interface{}) float64 {
 	 switch v := anything.(type) {
		case int:
            return float64(v)
		case float64:
			return v
		default:
			return 0
	}
	return 0.0
}

type stringAdd_struct struct {
	X string `db:"x" json:"x"`
	Z string `db:"z" json:"z"`
}

func main() {
	router := gin.Default()
	router.GET("/stringAdd", Get_stringAdd)
	router.Run(":"+os.Getenv("PORT"))
}

func stringAdd_struct_wrapper() stringAdd_struct {
	return stringAdd_struct{X: ("neel" + "vad"), Z: (("empty" + "") + "add")}
}

func Get_stringAdd(c *gin.Context) {
	stringAdd_struct := stringAdd_struct_wrapper()
	c.JSON(200, stringAdd_struct)
}
