package main

import (
	"github.com/gin-gonic/gin"
	"math"
	"os"
)

func int_conv(anything interface{}) int {
	switch v := anything.(type) {
		case int:
			return v
		case float64, float32:
			var float_var = v.(float64)
			return int(math.Trunc(float_var))
		default:
			return 0
	}
	return 0
}

func float_conv(anything interface{}) float64 {
 	 switch v := anything.(type) {
		case int:
            return float64(v)
		case float64:
			return v
		default:
			return 0
	}
	return 0.0
}

type testBinops_struct struct {
	A int `db:"a" json:"a"`
	B int `db:"b" json:"b"`
	C bool `db:"c" json:"c"`
	D bool `db:"d" json:"d"`
	E bool `db:"e" json:"e"`
	F bool `db:"f" json:"f"`
	G bool `db:"g" json:"g"`
}

func main() {
	router := gin.Default()
	router.GET("/testBinops", Get_testBinops)
	router.Run(":"+os.Getenv("PORT"))
}

func testBinops_struct_wrapper() testBinops_struct {
	return testBinops_struct{A: int_conv(7 % 4) * int_conv(3), B: int_conv(5 % 5) + int_conv(1), C: bool(2.3 < 1) && bool(bool(4 > 3)), D: bool(bool(2.3 > 1)) && bool(2 < 1), E: bool(bool(true) && bool(true)) && bool(true), F: bool(bool(true) || bool(false)) && bool(false), G: bool(bool(!true)) || bool(true)}
}

func Get_testBinops(c *gin.Context) {
	testBinops_struct := testBinops_struct_wrapper()
	c.JSON(200, testBinops_struct)
}
